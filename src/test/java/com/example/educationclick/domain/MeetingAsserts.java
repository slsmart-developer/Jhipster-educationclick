package com.example.educationclick.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MeetingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeetingAllPropertiesEquals(Meeting expected, Meeting actual) {
        assertMeetingAutoGeneratedPropertiesEquals(expected, actual);
        assertMeetingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeetingAllUpdatablePropertiesEquals(Meeting expected, Meeting actual) {
        assertMeetingUpdatableFieldsEquals(expected, actual);
        assertMeetingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeetingAutoGeneratedPropertiesEquals(Meeting expected, Meeting actual) {
        assertThat(expected)
            .as("Verify Meeting auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeetingUpdatableFieldsEquals(Meeting expected, Meeting actual) {
        assertThat(expected)
            .as("Verify Meeting relevant properties")
            .satisfies(e -> assertThat(e.getMeetingLink()).as("check meetingLink").isEqualTo(actual.getMeetingLink()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeetingUpdatableRelationshipsEquals(Meeting expected, Meeting actual) {
        assertThat(expected)
            .as("Verify Meeting relationships")
            .satisfies(e -> assertThat(e.getTeacher()).as("check teacher").isEqualTo(actual.getTeacher()))
            .satisfies(e -> assertThat(e.getTimeslot()).as("check timeslot").isEqualTo(actual.getTimeslot()))
            .satisfies(e -> assertThat(e.getStudent()).as("check student").isEqualTo(actual.getStudent()));
    }
}
